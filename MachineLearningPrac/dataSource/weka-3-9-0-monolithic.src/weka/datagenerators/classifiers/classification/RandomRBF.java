/*   1:    */ package weka.datagenerators.classifiers.classification;
/*   2:    */ 
/*   3:    */ import java.io.PrintStream;
/*   4:    */ import java.util.ArrayList;
/*   5:    */ import java.util.Enumeration;
/*   6:    */ import java.util.Random;
/*   7:    */ import java.util.Vector;
/*   8:    */ import weka.core.Attribute;
/*   9:    */ import weka.core.DenseInstance;
/*  10:    */ import weka.core.Instance;
/*  11:    */ import weka.core.Instances;
/*  12:    */ import weka.core.Option;
/*  13:    */ import weka.core.RevisionUtils;
/*  14:    */ import weka.core.Utils;
/*  15:    */ import weka.datagenerators.ClassificationGenerator;
/*  16:    */ 
/*  17:    */ public class RandomRBF
/*  18:    */   extends ClassificationGenerator
/*  19:    */ {
/*  20:    */   static final long serialVersionUID = 6069033710635728720L;
/*  21:    */   protected int m_NumAttributes;
/*  22:    */   protected int m_NumClasses;
/*  23:    */   protected int m_NumCentroids;
/*  24:    */   protected double[][] m_centroids;
/*  25:    */   protected int[] m_centroidClasses;
/*  26:    */   protected double[] m_centroidWeights;
/*  27:    */   protected double[] m_centroidStdDevs;
/*  28:    */   
/*  29:    */   public RandomRBF()
/*  30:    */   {
/*  31:140 */     setNumAttributes(defaultNumAttributes());
/*  32:141 */     setNumClasses(defaultNumClasses());
/*  33:142 */     setNumCentroids(defaultNumCentroids());
/*  34:    */   }
/*  35:    */   
/*  36:    */   public String globalInfo()
/*  37:    */   {
/*  38:152 */     return "RandomRBF data is generated by first creating a random set of centers for each class. Each center is randomly assigned a weight, a central point per attribute, and a standard deviation. To generate new instances, a center is chosen at random taking the weights of each center into consideration. Attribute values are randomly generated and offset from the center, where the overall vector has been scaled so that its length equals a value sampled randomly from the Gaussian distribution of the center. The particular center chosen determines the class of the instance.\n RandomRBF data contains only numeric attributes as it is non-trivial to include nominal values.";
/*  39:    */   }
/*  40:    */   
/*  41:    */   public Enumeration<Option> listOptions()
/*  42:    */   {
/*  43:172 */     Vector<Option> result = enumToVector(super.listOptions());
/*  44:    */     
/*  45:174 */     result.addElement(new Option("\tThe number of attributes (default " + defaultNumAttributes() + ").", "a", 1, "-a <num>"));
/*  46:    */     
/*  47:    */ 
/*  48:177 */     result.addElement(new Option("\tThe number of classes (default " + defaultNumClasses() + ")", "c", 1, "-c <num>"));
/*  49:    */     
/*  50:    */ 
/*  51:180 */     result.add(new Option("\tThe number of centroids to use. (default " + defaultNumCentroids() + ")", "C", 1, "-C <num>"));
/*  52:    */     
/*  53:    */ 
/*  54:183 */     return result.elements();
/*  55:    */   }
/*  56:    */   
/*  57:    */   public void setOptions(String[] options)
/*  58:    */     throws Exception
/*  59:    */   {
/*  60:248 */     super.setOptions(options);
/*  61:    */     
/*  62:250 */     String tmpStr = Utils.getOption('a', options);
/*  63:251 */     if (tmpStr.length() != 0) {
/*  64:252 */       setNumAttributes(Integer.parseInt(tmpStr));
/*  65:    */     } else {
/*  66:254 */       setNumAttributes(defaultNumAttributes());
/*  67:    */     }
/*  68:257 */     tmpStr = Utils.getOption('c', options);
/*  69:258 */     if (tmpStr.length() != 0) {
/*  70:259 */       setNumClasses(Integer.parseInt(tmpStr));
/*  71:    */     } else {
/*  72:261 */       setNumClasses(defaultNumClasses());
/*  73:    */     }
/*  74:264 */     tmpStr = Utils.getOption('C', options);
/*  75:265 */     if (tmpStr.length() != 0) {
/*  76:266 */       setNumCentroids(Integer.parseInt(tmpStr));
/*  77:    */     } else {
/*  78:268 */       setNumCentroids(defaultNumCentroids());
/*  79:    */     }
/*  80:    */   }
/*  81:    */   
/*  82:    */   public String[] getOptions()
/*  83:    */   {
/*  84:283 */     Vector<String> result = new Vector();
/*  85:284 */     String[] options = super.getOptions();
/*  86:285 */     for (int i = 0; i < options.length; i++) {
/*  87:286 */       result.add(options[i]);
/*  88:    */     }
/*  89:289 */     result.add("-a");
/*  90:290 */     result.add("" + getNumAttributes());
/*  91:    */     
/*  92:292 */     result.add("-c");
/*  93:293 */     result.add("" + getNumClasses());
/*  94:    */     
/*  95:295 */     result.add("-C");
/*  96:296 */     result.add("" + getNumCentroids());
/*  97:    */     
/*  98:298 */     return (String[])result.toArray(new String[result.size()]);
/*  99:    */   }
/* 100:    */   
/* 101:    */   protected int defaultNumAttributes()
/* 102:    */   {
/* 103:307 */     return 10;
/* 104:    */   }
/* 105:    */   
/* 106:    */   public void setNumAttributes(int numAttributes)
/* 107:    */   {
/* 108:316 */     this.m_NumAttributes = numAttributes;
/* 109:    */   }
/* 110:    */   
/* 111:    */   public int getNumAttributes()
/* 112:    */   {
/* 113:325 */     return this.m_NumAttributes;
/* 114:    */   }
/* 115:    */   
/* 116:    */   public String numAttributesTipText()
/* 117:    */   {
/* 118:335 */     return "The number of attributes the generated data will contain.";
/* 119:    */   }
/* 120:    */   
/* 121:    */   protected int defaultNumClasses()
/* 122:    */   {
/* 123:344 */     return 2;
/* 124:    */   }
/* 125:    */   
/* 126:    */   public void setNumClasses(int numClasses)
/* 127:    */   {
/* 128:353 */     this.m_NumClasses = numClasses;
/* 129:    */   }
/* 130:    */   
/* 131:    */   public int getNumClasses()
/* 132:    */   {
/* 133:362 */     return this.m_NumClasses;
/* 134:    */   }
/* 135:    */   
/* 136:    */   public String numClassesTipText()
/* 137:    */   {
/* 138:372 */     return "The number of classes to generate.";
/* 139:    */   }
/* 140:    */   
/* 141:    */   protected int defaultNumCentroids()
/* 142:    */   {
/* 143:381 */     return 50;
/* 144:    */   }
/* 145:    */   
/* 146:    */   public int getNumCentroids()
/* 147:    */   {
/* 148:390 */     return this.m_NumCentroids;
/* 149:    */   }
/* 150:    */   
/* 151:    */   public void setNumCentroids(int value)
/* 152:    */   {
/* 153:399 */     if (value > 0) {
/* 154:400 */       this.m_NumCentroids = value;
/* 155:    */     } else {
/* 156:402 */       System.out.println("At least 1 centroid is necessary (provided: " + value + ")!");
/* 157:    */     }
/* 158:    */   }
/* 159:    */   
/* 160:    */   public String numCentroidsTipText()
/* 161:    */   {
/* 162:414 */     return "The number of centroids to use.";
/* 163:    */   }
/* 164:    */   
/* 165:    */   public boolean getSingleModeFlag()
/* 166:    */     throws Exception
/* 167:    */   {
/* 168:426 */     return true;
/* 169:    */   }
/* 170:    */   
/* 171:    */   protected int chooseRandomIndexBasedOnProportions(double[] proportionArray, Random random)
/* 172:    */   {
/* 173:444 */     double probSum = Utils.sum(proportionArray);
/* 174:445 */     double val = random.nextDouble() * probSum;
/* 175:446 */     int index = 0;
/* 176:447 */     double sum = 0.0D;
/* 177:449 */     while ((sum <= val) && (index < proportionArray.length)) {
/* 178:450 */       sum += proportionArray[(index++)];
/* 179:    */     }
/* 180:453 */     return index - 1;
/* 181:    */   }
/* 182:    */   
/* 183:    */   public Instances defineDataFormat()
/* 184:    */     throws Exception
/* 185:    */   {
/* 186:473 */     this.m_Random = new Random(getSeed());
/* 187:474 */     Random rand = getRandom();
/* 188:    */     
/* 189:    */ 
/* 190:477 */     setNumExamplesAct(getNumExamples());
/* 191:    */     
/* 192:    */ 
/* 193:480 */     this.m_centroids = new double[getNumCentroids()][getNumAttributes()];
/* 194:481 */     this.m_centroidClasses = new int[getNumCentroids()];
/* 195:482 */     this.m_centroidWeights = new double[getNumCentroids()];
/* 196:483 */     this.m_centroidStdDevs = new double[getNumCentroids()];
/* 197:485 */     for (int i = 0; i < getNumCentroids(); i++)
/* 198:    */     {
/* 199:486 */       for (int j = 0; j < getNumAttributes(); j++) {
/* 200:487 */         this.m_centroids[i][j] = rand.nextDouble();
/* 201:    */       }
/* 202:489 */       this.m_centroidClasses[i] = rand.nextInt(getNumClasses());
/* 203:490 */       this.m_centroidWeights[i] = rand.nextDouble();
/* 204:491 */       this.m_centroidStdDevs[i] = rand.nextDouble();
/* 205:    */     }
/* 206:495 */     ArrayList<Attribute> atts = new ArrayList();
/* 207:496 */     for (i = 0; i < getNumAttributes(); i++) {
/* 208:497 */       atts.add(new Attribute("a" + i));
/* 209:    */     }
/* 210:500 */     ArrayList<String> clsValues = new ArrayList();
/* 211:501 */     for (i = 0; i < getNumClasses(); i++) {
/* 212:502 */       clsValues.add("c" + i);
/* 213:    */     }
/* 214:504 */     atts.add(new Attribute("class", clsValues));
/* 215:    */     
/* 216:506 */     this.m_DatasetFormat = new Instances(getRelationNameToUse(), atts, 0);
/* 217:    */     
/* 218:508 */     return this.m_DatasetFormat;
/* 219:    */   }
/* 220:    */   
/* 221:    */   public Instance generateExample()
/* 222:    */     throws Exception
/* 223:    */   {
/* 224:531 */     Instance result = null;
/* 225:532 */     Random rand = getRandom();
/* 226:534 */     if (this.m_DatasetFormat == null) {
/* 227:535 */       throw new Exception("Dataset format not defined.");
/* 228:    */     }
/* 229:539 */     int centroid = chooseRandomIndexBasedOnProportions(this.m_centroidWeights, rand);
/* 230:540 */     double label = this.m_centroidClasses[centroid];
/* 231:    */     
/* 232:    */ 
/* 233:543 */     double[] atts = new double[getNumAttributes() + 1];
/* 234:544 */     for (int i = 0; i < getNumAttributes(); i++) {
/* 235:545 */       atts[i] = (rand.nextDouble() * 2.0D - 1.0D);
/* 236:    */     }
/* 237:547 */     atts[(atts.length - 1)] = label;
/* 238:    */     
/* 239:549 */     double magnitude = 0.0D;
/* 240:550 */     for (i = 0; i < getNumAttributes(); i++) {
/* 241:551 */       magnitude += atts[i] * atts[i];
/* 242:    */     }
/* 243:554 */     magnitude = Math.sqrt(magnitude);
/* 244:555 */     double desiredMag = rand.nextGaussian() * this.m_centroidStdDevs[centroid];
/* 245:556 */     double scale = desiredMag / magnitude;
/* 246:557 */     for (i = 0; i < getNumAttributes(); i++)
/* 247:    */     {
/* 248:558 */       atts[i] *= scale;
/* 249:559 */       atts[i] += this.m_centroids[centroid][i];
/* 250:560 */       result = new DenseInstance(1.0D, atts);
/* 251:    */     }
/* 252:564 */     result.setDataset(this.m_DatasetFormat);
/* 253:    */     
/* 254:566 */     return result;
/* 255:    */   }
/* 256:    */   
/* 257:    */   public Instances generateExamples()
/* 258:    */     throws Exception
/* 259:    */   {
/* 260:584 */     Instances result = new Instances(this.m_DatasetFormat, 0);
/* 261:585 */     this.m_Random = new Random(getSeed());
/* 262:587 */     for (int i = 0; i < getNumExamplesAct(); i++) {
/* 263:588 */       result.add(generateExample());
/* 264:    */     }
/* 265:591 */     return result;
/* 266:    */   }
/* 267:    */   
/* 268:    */   public String generateStart()
/* 269:    */   {
/* 270:606 */     StringBuffer result = new StringBuffer();
/* 271:    */     
/* 272:608 */     result.append("%\n");
/* 273:609 */     result.append("% centroids:\n");
/* 274:610 */     for (int i = 0; i < getNumCentroids(); i++) {
/* 275:611 */       result.append("% " + i + ".: " + Utils.arrayToString(this.m_centroids[i]) + "\n");
/* 276:    */     }
/* 277:614 */     result.append("%\n");
/* 278:615 */     result.append("% centroidClasses: " + Utils.arrayToString(this.m_centroidClasses) + "\n");
/* 279:    */     
/* 280:617 */     result.append("%\n");
/* 281:618 */     result.append("% centroidWeights: " + Utils.arrayToString(this.m_centroidWeights) + "\n");
/* 282:    */     
/* 283:620 */     result.append("%\n");
/* 284:621 */     result.append("% centroidStdDevs: " + Utils.arrayToString(this.m_centroidStdDevs) + "\n");
/* 285:    */     
/* 286:623 */     result.append("%\n");
/* 287:    */     
/* 288:625 */     return result.toString();
/* 289:    */   }
/* 290:    */   
/* 291:    */   public String generateFinished()
/* 292:    */     throws Exception
/* 293:    */   {
/* 294:637 */     return "";
/* 295:    */   }
/* 296:    */   
/* 297:    */   public String getRevision()
/* 298:    */   {
/* 299:647 */     return RevisionUtils.extract("$Revision: 10203 $");
/* 300:    */   }
/* 301:    */   
/* 302:    */   public static void main(String[] args)
/* 303:    */   {
/* 304:656 */     runDataGenerator(new RandomRBF(), args);
/* 305:    */   }
/* 306:    */ }


/* Location:           C:\Users\Administrator\Desktop\weka-3-9-0-monolithic.jar
 * Qualified Name:     weka.datagenerators.classifiers.classification.RandomRBF
 * JD-Core Version:    0.7.0.1
 */