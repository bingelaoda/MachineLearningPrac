/*   1:    */ package weka.classifiers.meta;
/*   2:    */ 
/*   3:    */ import java.util.ArrayList;
/*   4:    */ import java.util.Random;
/*   5:    */ import weka.classifiers.AbstractClassifier;
/*   6:    */ import weka.classifiers.Classifier;
/*   7:    */ import weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer;
/*   8:    */ import weka.classifiers.trees.RandomTree;
/*   9:    */ import weka.core.Attribute;
/*  10:    */ import weka.core.Capabilities;
/*  11:    */ import weka.core.Instance;
/*  12:    */ import weka.core.Instances;
/*  13:    */ import weka.core.PartitionGenerator;
/*  14:    */ import weka.core.Randomizable;
/*  15:    */ import weka.core.RevisionUtils;
/*  16:    */ import weka.core.Utils;
/*  17:    */ import weka.core.WeightedInstancesHandler;
/*  18:    */ 
/*  19:    */ public class RandomCommittee
/*  20:    */   extends RandomizableParallelIteratedSingleClassifierEnhancer
/*  21:    */   implements WeightedInstancesHandler, PartitionGenerator
/*  22:    */ {
/*  23:    */   static final long serialVersionUID = -9204394360557300093L;
/*  24:    */   protected Instances m_data;
/*  25:    */   
/*  26:    */   public RandomCommittee()
/*  27:    */   {
/*  28:107 */     this.m_Classifier = new RandomTree();
/*  29:    */   }
/*  30:    */   
/*  31:    */   protected String defaultClassifierString()
/*  32:    */   {
/*  33:117 */     return "weka.classifiers.trees.RandomTree";
/*  34:    */   }
/*  35:    */   
/*  36:    */   public String globalInfo()
/*  37:    */   {
/*  38:127 */     return "Class for building an ensemble of randomizable base classifiers. Each base classifiers is built using a different random number seed (but based one the same data). The final prediction is a straight average of the predictions generated by the individual base classifiers.";
/*  39:    */   }
/*  40:    */   
/*  41:    */   public void buildClassifier(Instances data)
/*  42:    */     throws Exception
/*  43:    */   {
/*  44:143 */     getCapabilities().testWithFail(data);
/*  45:    */     
/*  46:    */ 
/*  47:146 */     this.m_data = new Instances(data);
/*  48:147 */     super.buildClassifier(this.m_data);
/*  49:149 */     if (!(this.m_Classifier instanceof Randomizable)) {
/*  50:150 */       throw new IllegalArgumentException("Base learner must implement Randomizable!");
/*  51:    */     }
/*  52:153 */     this.m_Classifiers = AbstractClassifier.makeCopies(this.m_Classifier, this.m_NumIterations);
/*  53:    */     
/*  54:155 */     Random random = this.m_data.getRandomNumberGenerator(this.m_Seed);
/*  55:158 */     if (!(this.m_Classifier instanceof WeightedInstancesHandler)) {
/*  56:159 */       this.m_data = this.m_data.resampleWithWeights(random);
/*  57:    */     }
/*  58:162 */     for (int j = 0; j < this.m_Classifiers.length; j++) {
/*  59:165 */       ((Randomizable)this.m_Classifiers[j]).setSeed(random.nextInt());
/*  60:    */     }
/*  61:171 */     buildClassifiers();
/*  62:    */     
/*  63:    */ 
/*  64:174 */     this.m_data = null;
/*  65:    */   }
/*  66:    */   
/*  67:    */   protected synchronized Instances getTrainingSet(int iteration)
/*  68:    */     throws Exception
/*  69:    */   {
/*  70:187 */     return this.m_data;
/*  71:    */   }
/*  72:    */   
/*  73:    */   public double[] distributionForInstance(Instance instance)
/*  74:    */     throws Exception
/*  75:    */   {
/*  76:200 */     double[] sums = new double[instance.numClasses()];
/*  77:    */     
/*  78:202 */     double numPreds = 0.0D;
/*  79:203 */     for (int i = 0; i < this.m_NumIterations; i++) {
/*  80:204 */       if (instance.classAttribute().isNumeric() == true)
/*  81:    */       {
/*  82:205 */         double pred = this.m_Classifiers[i].classifyInstance(instance);
/*  83:206 */         if (!Utils.isMissingValue(pred))
/*  84:    */         {
/*  85:207 */           sums[0] += pred;
/*  86:208 */           numPreds += 1.0D;
/*  87:    */         }
/*  88:    */       }
/*  89:    */       else
/*  90:    */       {
/*  91:211 */         double[] newProbs = this.m_Classifiers[i].distributionForInstance(instance);
/*  92:212 */         for (int j = 0; j < newProbs.length; j++) {
/*  93:213 */           sums[j] += newProbs[j];
/*  94:    */         }
/*  95:    */       }
/*  96:    */     }
/*  97:216 */     if (instance.classAttribute().isNumeric() == true)
/*  98:    */     {
/*  99:217 */       if (numPreds == 0.0D) {
/* 100:218 */         sums[0] = Utils.missingValue();
/* 101:    */       } else {
/* 102:220 */         sums[0] /= numPreds;
/* 103:    */       }
/* 104:222 */       return sums;
/* 105:    */     }
/* 106:223 */     if (Utils.eq(Utils.sum(sums), 0.0D)) {
/* 107:224 */       return sums;
/* 108:    */     }
/* 109:226 */     Utils.normalize(sums);
/* 110:227 */     return sums;
/* 111:    */   }
/* 112:    */   
/* 113:    */   public String toString()
/* 114:    */   {
/* 115:238 */     if (this.m_Classifiers == null) {
/* 116:239 */       return "RandomCommittee: No model built yet.";
/* 117:    */     }
/* 118:241 */     StringBuffer text = new StringBuffer();
/* 119:242 */     text.append("All the base classifiers: \n\n");
/* 120:243 */     for (int i = 0; i < this.m_Classifiers.length; i++) {
/* 121:244 */       text.append(this.m_Classifiers[i].toString() + "\n\n");
/* 122:    */     }
/* 123:246 */     return text.toString();
/* 124:    */   }
/* 125:    */   
/* 126:    */   public void generatePartition(Instances data)
/* 127:    */     throws Exception
/* 128:    */   {
/* 129:254 */     if ((this.m_Classifier instanceof PartitionGenerator)) {
/* 130:255 */       buildClassifier(data);
/* 131:    */     } else {
/* 132:256 */       throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");
/* 133:    */     }
/* 134:    */   }
/* 135:    */   
/* 136:    */   public double[] getMembershipValues(Instance inst)
/* 137:    */     throws Exception
/* 138:    */   {
/* 139:265 */     if ((this.m_Classifier instanceof PartitionGenerator))
/* 140:    */     {
/* 141:266 */       ArrayList<double[]> al = new ArrayList();
/* 142:267 */       int size = 0;
/* 143:268 */       for (int i = 0; i < this.m_Classifiers.length; i++)
/* 144:    */       {
/* 145:269 */         double[] r = ((PartitionGenerator)this.m_Classifiers[i]).getMembershipValues(inst);
/* 146:    */         
/* 147:271 */         size += r.length;
/* 148:272 */         al.add(r);
/* 149:    */       }
/* 150:274 */       double[] values = new double[size];
/* 151:275 */       int pos = 0;
/* 152:276 */       for (double[] v : al)
/* 153:    */       {
/* 154:277 */         System.arraycopy(v, 0, values, pos, v.length);
/* 155:278 */         pos += v.length;
/* 156:    */       }
/* 157:280 */       return values;
/* 158:    */     }
/* 159:281 */     throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");
/* 160:    */   }
/* 161:    */   
/* 162:    */   public int numElements()
/* 163:    */     throws Exception
/* 164:    */   {
/* 165:290 */     if ((this.m_Classifier instanceof PartitionGenerator))
/* 166:    */     {
/* 167:291 */       int size = 0;
/* 168:292 */       for (int i = 0; i < this.m_Classifiers.length; i++) {
/* 169:293 */         size += ((PartitionGenerator)this.m_Classifiers[i]).numElements();
/* 170:    */       }
/* 171:295 */       return size;
/* 172:    */     }
/* 173:296 */     throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");
/* 174:    */   }
/* 175:    */   
/* 176:    */   public String getRevision()
/* 177:    */   {
/* 178:306 */     return RevisionUtils.extract("$Revision: 11461 $");
/* 179:    */   }
/* 180:    */   
/* 181:    */   public static void main(String[] argv)
/* 182:    */   {
/* 183:315 */     runClassifier(new RandomCommittee(), argv);
/* 184:    */   }
/* 185:    */ }


/* Location:           C:\Users\Administrator\Desktop\weka-3-9-0-monolithic.jar
 * Qualified Name:     weka.classifiers.meta.RandomCommittee
 * JD-Core Version:    0.7.0.1
 */